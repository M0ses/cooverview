#!/usr/bin/env perl

use strict;
use warnings;
use YAML;
use Data::Dumper;
use JSON::XS;
use Net::Docker::Registry::Client;

my $config = YAML::LoadFile("/etc/cooverview/config.yml");
my $drc = Net::Docker::Registry::Client->new(%$config);

if ($ENV{REQUEST_METHOD} eq 'POST') {
  my $content;
  read(*STDIN, $content, $ENV{CONTENT_LENGTH}) || die "Cannot read from stdin $ENV{CONTENT_LENGTH}";
  my $data = decode_json($content);

  create_details_html($drc, $data->{container});

} else {
  create_start_page($config, $drc);
}
exit 0;

sub create_start_page {
  my ($config, $drc) = @_;
  my $content;

  for my $rep (@{$drc->repositories()}) {
    #print "- Found repository $rep\n";
    $content .= "<div class='alert alert-primary container-hl' id='hl-$rep'>Found image <strong>$rep</strong></div>
  <div id='details-$rep'></div>\n";
  }

  print_page($content);
}

sub create_details_html {
  my ($drc, $rep) = @_;
  my $content;

  my $pull_prefix="docker pull $config->{pull_host}".(($config->{pull_port}) ? ":$config->{pull_port}/" : "/");

  my $tag_template = '
   <div class=row>
    <div class=col-md-1>
    </div>
    <div class=col-md-11>
      %s
    </div>
   </div>
  ';

  my $layer_template = '
   <div class=row>
    <div class=col-md-2>
    </div>
    <div class=col-md-10>
     %s
    </div>
   </div>
  ';

  for my $tag (@{$drc->list_tags($rep)}) {
    my $manifest = $drc->manifests($rep, $tag);
    $content .= "<div class='alert alert-secondary'>$pull_prefix$rep:$tag</div>\n";
    $content .= "<div class=details-box>\n";
    $content .= sprintf($tag_template, "Name : $manifest->{name}");
    $content .= sprintf($tag_template, "Tag: $manifest->{tag}");
    $content .= sprintf($tag_template, "Arch: $manifest->{architecture}");
    $content .= sprintf($tag_template, "Layers:");
    foreach my $layer (@{$manifest->{fsLayers}}) {
      $content .=  sprintf($layer_template, "- $layer->{blobSum}");
    }
    $content .= "</div>\n";
  }
  print "Content-type:text/html\r\n\r\n";
  print $content
}


sub print_page {
  my ($content) = @_;
  print "Content-type:text/html\r\n\r\n";
  print '<html>
<head>
  <title>Docker Images Overview</title>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <link rel="stylesheet" href="/css/bootstrap.min.css">
  <link rel="stylesheet" href="/css/my.css">
</head>
<body>
  <div class=container>
    <div class=jumbotron>
      <h1>SUSE Internal Container Registry/Notary</h1>
      <h2>Container Images built by OBS</h2>
      <p>You can click on the blue boxes to get detailed information about the
         container image including the known tags and included layers. In the
         grey boxes you will find a complete command line to pull the images into
         your local docker environment.
      </p>
      <p>
        For comments or bugreports, feel free to <a href="mailto:fschreiner@suse.de">send me an email</a>
      </p>
<p>
<strong>Attention:</strong><br>
As we use an internal ssl certificate, it is required to import the SUSE CA certificates on your client. For further information, please have a look at<br>
<br>
<a href=http://ca.suse.de/gettingstarted/#system>http://ca.suse.de/gettingstarted/#system</a>
</p>
    </div>
    '.$content.'
  </div>
  <script src="/js/jquery-3.2.1.min.js"></script>
  <script src="/js/bootstrap.bundle.min.js"></script>
  <script src="/js/my.js"></script>
  </body>
</html>
';
}

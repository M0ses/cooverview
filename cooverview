#!/usr/bin/env perl

use strict;
use warnings;
use YAML;
use Data::Dumper;
use JSON::MaybeXS;
use Net::Docker::Registry::Client;
use Template;
my $cfg_file = "/etc/cooverview/config.yml";

if ($ENV{NET_SERVER_TYPE} && $ENV{NET_SERVER_TYPE} eq 'Net::Server::PreFork') {
  $cfg_file = "./config.yml";
}

my $config = YAML::LoadFile($cfg_file);
my $drc = Net::Docker::Registry::Client->new(%$config);
my $tconfig = {
  INCLUDE_PATH => $config->{templates_dir} || '/etc/cooverview/templates'
};

my $template = Template->new($tconfig);

print "Content-type:text/html\r\n\r\n";

if ($ENV{REQUEST_METHOD} eq 'POST') {
  my $content;
  read(*STDIN, $content, $ENV{CONTENT_LENGTH}) || die "Cannot read from stdin $ENV{CONTENT_LENGTH}";
  my $data = decode_json($content);

  create_details_html($drc, $data->{container});
} else {
  create_start_page($config, $drc);
}

exit 0;

################################################################################
# SUBS
################################################################################
sub create_start_page {
  my ($config, $drc) = @_;
  my $content;
  my $repos;
  my $error;

  eval {
    $repos = $drc->repositories();
  };

  $error = "An error occured while generating repository list: $@" if $@;

  $template->process(
    'index.html.tt2',
    {
      error        => $error,
      repositories => $repos,
    }
  ) || die $template->error();
}

sub create_details_html {
  my ($drc, $rep) = @_;
  my $content;
  my $error;
  my $tags = [];
  my $info;

  my $pull_prefix="docker pull $config->{pull_host}".(($config->{pull_port}) ? ":$config->{pull_port}/" : "/");

  eval {
    my $all_tags = $drc->list_tags($rep);
    die "No tags defined for this image\n" unless $all_tags;
    for my $tag (@{$all_tags}) {
      my $manifest = $drc->manifests($rep, $tag);
      my $data = {
        pull_command => "$pull_prefix$rep:$tag",
        manifest     => $manifest,
        name         => $rep,
      };
      push @$tags, $data;
    }

    $info = $drc->obs_info_json($rep) if $config->{use_obs_extended_info};
  };

  $error = $@ if $@;

  print STDERR Dumper($info);

  $template->process(
    'details.tt2',
    {
      error  => $error,
      tags   => $tags,
      info   => $info,
      use_obs_extended_info => $config->{use_obs_extended_info},
    }
  ) || die $template->error();
}
